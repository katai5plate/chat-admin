{"version":3,"sources":["components/pages/Chat.tsx","components/pages/Admin/Posts.tsx","components/pages/Admin/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Page","Link","to","List","props","Datagrid","rowClick","TextField","source","DateField","Edit","SimpleForm","TextInput","Admin","dataProvider","this","Resource","name","list","PostList","edit","PostEdit","React","Component","test","window","location","href","jsonServerProvider","fakeServerProvider","posts","username","comment","App","BrowserRouter","Switch","Route","exact","path","component","ChatPage","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAUeA,EAPQ,kBACrB,6BACE,uGACA,kBAACC,EAAA,EAAD,CAAMC,GAAG,WAAT,oC,8HCMSC,EAAiB,SAAAC,GAAK,OACjC,kBAAC,IAAWA,EACV,kBAACC,EAAA,EAAD,CAAUC,SAAS,QACjB,kBAACC,EAAA,EAAD,CAAWC,OAAO,OAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,aAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,YAClB,kBAACC,EAAA,EAAD,CAAWD,OAAO,cAClB,kBAACC,EAAA,EAAD,CAAWD,OAAO,iBAKXE,EAAiB,SAAAN,GAAK,OACjC,kBAAC,IAAWA,EACV,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWJ,OAAO,aAClB,kBAACI,EAAA,EAAD,CAAWJ,OAAO,eCRTR,E,iLARX,OACE,kBAACa,EAAA,EAAD,CAAOC,aAAcC,KAAKX,MAAMU,cAC9B,kBAACE,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAMC,EAAUC,KAAMC,S,GAJlCC,IAAMC,WCCnBT,EACkB,YAAYU,KAAKC,OAAOC,SAASC,MAE9CC,YAQR,yBANMC,YAAmB,CACxBC,MAAO,CACL,CAAEC,SAAU,OAAQC,QAAS,iCAC7B,CAAED,SAAU,OAAQC,QAAS,oCAmBpBC,EAdO,WACpB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAACJ,EAAA,EAAD,CACEE,KAAK,UACLC,UAAW,kBAAM,kBAAC,EAAD,CAAWzB,aAAcA,UCnBhC2B,QACW,cAA7BhB,OAAOC,SAASgB,UAEe,UAA7BjB,OAAOC,SAASgB,UAEhBjB,OAAOC,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d3a1ec8b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Page: React.FC = () => (\n  <div>\n    <p>ここにチャットとかを出す</p>\n    <Link to=\"/admin/\">管理画面へ</Link>\n  </div>\n);\n\nexport default Page;\n","import React from \"react\";\n\nimport {\n  List as RAList,\n  Datagrid,\n  TextField,\n  DateField,\n  Edit as RAEdit,\n  SimpleForm,\n  TextInput\n} from \"react-admin\";\n\nexport const List: React.FC = props => (\n  <RAList {...props}>\n    <Datagrid rowClick=\"edit\">\n      <TextField source=\"id\" />\n      <TextField source=\"username\" />\n      <TextField source=\"comment\" />\n      <DateField source=\"createdAt\" />\n      <DateField source=\"updatedAt\" />\n    </Datagrid>\n  </RAList>\n);\n\nexport const Edit: React.FC = props => (\n  <RAEdit {...props}>\n    <SimpleForm>\n      <TextInput source=\"username\" />\n      <TextInput source=\"comment\" />\n    </SimpleForm>\n  </RAEdit>\n);\n","import React from \"react\";\n\nimport { Admin, Resource } from \"react-admin\";\n\nimport { List as PostList, Edit as PostEdit } from \"./Posts\";\n\ntype Props = {\n  dataProvider: any;\n};\n\nclass Page extends React.Component<Props> {\n  render() {\n    return (\n      <Admin dataProvider={this.props.dataProvider}>\n        <Resource name=\"posts\" list={PostList} edit={PostEdit} />\n      </Admin>\n    );\n  }\n}\n\nexport default Page;\n","import React from \"react\";\r\n// import logo from \"./assets/logo.svg\";\r\nimport \"./styles/App.css\";\r\n\r\nimport jsonServerProvider from \"ra-data-json-server\";\r\nimport fakeServerProvider from \"ra-data-fakerest\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport ChatPage from \"./components/pages/Chat\";\r\nimport AdminPage from \"./components/pages/Admin\";\r\n\r\nconst dataProvider = (url => {\r\n  const isLocalServer = /localhost/.test(window.location.href);\r\n  if (isLocalServer) {\r\n    return jsonServerProvider(url);\r\n  }\r\n  return fakeServerProvider({\r\n    posts: [\r\n      { username: \"hoge\", comment: \"hwapiojfaijpiawupiofemaipofwm\" },\r\n      { username: \"huga\", comment: \"ofwkofkweojwfijwefihjwefiohjd\" }\r\n    ]\r\n  });\r\n})(\"http://localhost:3001\");\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={ChatPage} />\r\n        <Route\r\n          path=\"/admin/\"\r\n          component={() => <AdminPage dataProvider={dataProvider} />}\r\n        />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}